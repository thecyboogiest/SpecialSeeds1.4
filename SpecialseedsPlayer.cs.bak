using System;
using System.Collections.Generic;
using System.Linq;
using AdvancedWorldGen.Base;
using Microsoft.Xna.Framework;
using Specialseeds1point4.Tiles;
using Terraria;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.ModLoader;

namespace Specialseeds1point4;

public class SpecialseedsPlayer : ModPlayer
{
	public string worldSeed = Main.ActiveWorldFileData.Name;

	public float tickSpeed = 60f;

	public int tickTimer;

	private float veloPain;

	public int bossesDefeated;

	public float breakStoneCooldown;

	public List<BreakTile> tilesToBreak = new List<BreakTile>();

	public override void PostUpdate()
	{
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0508: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0559: Unknown result type (might be due to invalid IL or missing references)
		//IL_0584: Unknown result type (might be due to invalid IL or missing references)
		//IL_059d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_063b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0669: Unknown result type (might be due to invalid IL or missing references)
		//IL_067d: Unknown result type (might be due to invalid IL or missing references)
		//IL_069c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ed: Unknown result type (might be due to invalid IL or missing references)
		worldSeed = Main.ActiveWorldFileData.Name;
		if (tilesToBreak.Count > 0)
		{
			if (MathF.Abs(tilesToBreak.FirstOrDefault().playerX - tilesToBreak.FirstOrDefault().x) < 15f)
			{
				WorldGen.KillTile(tilesToBreak.FirstOrDefault().x, tilesToBreak.FirstOrDefault().y);
			}
			tilesToBreak.RemoveAt(0);
		}
		if (API.OptionsContains(new string[1] { "Velocity" }))
		{
			if (base.Player.velocity.X == 0f)
			{
				veloPain += 0.01f;
				base.Player.statLife -= (int)(1f + veloPain);
				CombatText.NewText(new Rectangle((int)base.Player.position.X, (int)base.Player.position.Y, base.Player.width, base.Player.height), CombatText.LifeRegen, 1, dramatic: false, dot: true);
				if (base.Player.statLife <= 0 && base.Player.whoAmI == Main.myPlayer)
				{
					base.Player.KillMe(PlayerDeathReason.ByOther(5), 10.0, 0);
				}
			}
			else
			{
				veloPain = 0f;
			}
		}
		if (API.OptionsContains(new string[1] { "Nuked" }))
		{
			if (base.Player.statLife <= 0)
			{
				tickSpeed = 60f;
				tickTimer = 0;
			}
			if (base.Player.wet || ((double)base.Player.Center.Y <= (Main.worldSurface - 25.0) * 16.0 && base.Player.Center.X >= (float)((Main.maxTilesX / 2 - 400) * 16) && base.Player.Center.X <= (float)((Main.maxTilesX / 2 + 400) * 16)))
			{
				if ((tickTimer == (int)(tickSpeed / 2f) || Main.rand.Next((int)tickSpeed * 4) == 0) && tickSpeed <= 30f)
				{
					base.Player.statLife -= 2;
					CombatText.NewText(new Rectangle((int)base.Player.position.X, (int)base.Player.position.Y, base.Player.width, base.Player.height), CombatText.LifeRegen, 2, dramatic: false, dot: true);
					if (base.Player.statLife <= 0 && base.Player.whoAmI == Main.myPlayer)
					{
						base.Player.KillMe(PlayerDeathReason.ByOther(9), 10.0, 0);
					}
				}
				if (tickSpeed > 15f)
				{
					tickSpeed -= 0.1f;
				}
				if ((float)tickTimer >= tickSpeed)
				{
					SoundEngine.PlaySound(SoundLoader.GetLegacySoundSlot(ModLoader.GetMod("Specialseeds1point4"), "Sounds/GeigerCounterSound"), base.Player.Center);
					tickTimer = Main.rand.Next(0, 14);
				}
				else
				{
					tickTimer++;
				}
			}
			else
			{
				tickSpeed = 60f;
				tickTimer = 0;
			}
		}
		if (!API.OptionsContains(new string[1] { "Trapmania" }))
		{
			return;
		}
		if ((double)base.Player.Center.Y > WorldGen.worldSurface)
		{
			if (breakStoneCooldown > 0f)
			{
				breakStoneCooldown -= 0.1f;
			}
			else
			{
				breakStoneCooldown = 0f;
			}
		}
		if (breakStoneCooldown == 0f)
		{
			if (Main.tile[(int)base.Player.Center.X / 16, (int)(base.Player.Center.Y / 16f) + 2].type == ModContent.TileType<CrackedStone>())
			{
				WorldGen.KillTile((int)base.Player.Center.X / 16, (int)(base.Player.Center.Y / 16f) + 2);
				for (int i = 0; (float)i < base.Player.velocity.Y; i++)
				{
					for (int r = -3; r < 3; r++)
					{
						if (r > -1 && r < 1)
						{
							if (Main.tile[(int)(base.Player.Center.X / 16f) + r, (int)(base.Player.Center.Y / 16f) + i].type == ModContent.TileType<CrackedStone>())
							{
								BreakTile((int)(base.Player.Center.X / 16f) + r, (int)(base.Player.Center.Y / 16f) + i);
							}
						}
						else if (Main.rand.Next(2) != 0 && Main.tile[(int)(base.Player.Center.X / 16f) + r, (int)(base.Player.Center.Y / 16f) + i].type == ModContent.TileType<CrackedStone>())
						{
							BreakTile((int)(base.Player.Center.X / 16f) + r, (int)(base.Player.Center.Y / 16f) + i);
						}
					}
				}
				breakStoneCooldown = 5f;
			}
			else
			{
				breakStoneCooldown = 0f;
			}
		}
		else if (Main.rand.Next(120) == 0 && breakStoneCooldown == 0f)
		{
			if (Main.tile[(int)base.Player.Center.X / 16, (int)(base.Player.Center.Y / 16f) + 2].type == ModContent.TileType<CrackedStone>())
			{
				BreakTile((int)base.Player.Center.X / 16, (int)(base.Player.Center.Y / 16f) + 2);
				BreakTile((int)(base.Player.Center.X / 16f) - 1, (int)(base.Player.Center.Y / 16f) + 3);
				BreakTile((int)(base.Player.Center.X / 16f) + 1, (int)(base.Player.Center.Y / 16f) + 3);
				breakStoneCooldown = 2f;
			}
			else
			{
				breakStoneCooldown = 0f;
			}
		}
		if (base.Player.HasBuff(111))
		{
			base.Player.ClearBuff(111);
		}
	}

	public override void OnHitByNPC(NPC npc, int damage, bool crit)
	{
		worldSeed = Main.ActiveWorldFileData.Name;
		if (API.OptionsContains(new string[1] { "Lifesteal" }))
		{
			if (base.Player.statLifeMax > damage + 25)
			{
				base.Player.statLifeMax = base.Player.statLife;
			}
			else
			{
				base.Player.statLifeMax = 25;
			}
			if (base.Player.statLifeMax < 25)
			{
				base.Player.statLifeMax = 25;
			}
		}
		if (API.OptionsContains(new string[1] { "Nuked" }))
		{
			base.Player.AddBuff(20, 169);
		}
	}

	public override void OnHitByProjectile(Projectile proj, int damage, bool crit)
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (proj.friendly)
		{
			base.Player.statLife -= damage / 2 + damage / 6 * bossesDefeated;
			CombatText.NewText(new Rectangle((int)base.Player.position.X, (int)base.Player.position.Y, base.Player.width, base.Player.height), CombatText.LifeRegen, damage / 2, dramatic: false, dot: true);
			if (base.Player.statLife <= 0 && base.Player.whoAmI == Main.myPlayer)
			{
				base.Player.KillMe(PlayerDeathReason.ByOther(5), 10.0, 0);
			}
		}
	}

	public void BreakTile(int i, int j)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		BreakTile tileToBreak = new BreakTile();
		tileToBreak.setXY(i, j, (int)base.Player.Center.X / 16, (int)base.Player.Center.Y / 16);
		if (!tilesToBreak.Contains(tileToBreak))
		{
			tilesToBreak.Add(tileToBreak);
		}
	}
}
